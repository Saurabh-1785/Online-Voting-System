# aptos-contracts/Move.toml

[package]
name = "voting"
version = "1.0.0"
authors = ["Election Commission of India <tech@eci.gov.in>"]

[addresses]
voting = "_"  # Will be set during deployment

[dependencies.AptosFramework]
git = "https://github.com/aptos-labs/aptos-core.git"
rev = "mainnet"
subdir = "aptos-move/framework/aptos-framework"

[dependencies.AptosStdlib]
git = "https://github.com/aptos-labs/aptos-core.git"
rev = "mainnet"
subdir = "aptos-move/framework/aptos-stdlib"

[dev-dependencies]

# ============================================
# DEPLOYMENT INSTRUCTIONS
# ============================================

# Prerequisites:
# 1. Install Aptos CLI: https://aptos.dev/tools/install-cli/
# 2. Create Aptos account
# 3. Fund account with APT (devnet faucet or testnet)

# Step 1: Initialize Aptos Project
$ cd aptos-contracts
$ aptos init
# Choose network: devnet/testnet/mainnet
# This creates .aptos/config.yaml

# Step 2: Compile Move Modules
$ aptos move compile --named-addresses voting=0x<your_address>
# This validates your Move code

# Step 3: Run Tests
$ aptos move test
# Runs all tests in tests/ directory

# Step 4: Deploy to Devnet
$ aptos move publish \
  --named-addresses voting=0x<your_address> \
  --assume-yes
# This deploys all modules to the blockchain

# Step 5: Verify Deployment
$ aptos account list --account 0x<your_address>
# Should show: voting::voter_registry, voting::encrypted_ballot, voting::bulletin_board

# Step 6: Initialize Contracts
$ aptos move run \
  --function-id '0x<your_address>::voter_registry::initialize' \
  --assume-yes

$ aptos move run \
  --function-id '0x<your_address>::encrypted_ballot::initialize' \
  --args u64:$(date +%s) u64:$(date -d '+30 days' +%s) \
  --assume-yes

$ aptos move run \
  --function-id '0x<your_address>::bulletin_board::initialize' \
  --args 'string:GENERAL_ELECTION_2025' \
  --assume-yes

# Step 7: Update Environment Variables
# frontend/.env
VITE_MODULE_ADDRESS=0x<your_address>
VITE_APTOS_NODE_URL=https://fullnode.devnet.aptoslabs.com/v1
VITE_APTOS_NETWORK=devnet

# backend/.env
MODULE_ADDRESS=0x<your_address>
APTOS_NODE_URL=https://fullnode.devnet.aptoslabs.com/v1
APTOS_PRIVATE_KEY=0x<your_private_key>

# Step 8: Test Integration
$ cd ../frontend
$ npm run dev

# Navigate to: http://localhost:8080
# Connect Petra Wallet
# Test registration flow

# ============================================
# TESTNET DEPLOYMENT
# ============================================

# Step 1: Switch to Testnet
$ aptos init --network testnet

# Step 2: Fund Account (Testnet Faucet)
$ aptos account fund-with-faucet --account 0x<your_address>

# Step 3: Deploy to Testnet
$ aptos move publish \
  --named-addresses voting=0x<your_address> \
  --assume-yes

# ============================================
# MAINNET DEPLOYMENT (PRODUCTION)
# ============================================

# ⚠️ WARNING: Mainnet deployment is PERMANENT and costs real money
# ⚠️ Perform extensive testing on devnet/testnet first
# ⚠️ Get security audit before mainnet deployment
# ⚠️ Use hardware wallet for deployment keys

# Step 1: Security Checklist
# ✅ Code audited by professional firm
# ✅ All tests passing
# ✅ Testnet deployment successful
# ✅ Bug bounty program active
# ✅ Emergency pause mechanism tested
# ✅ Multi-sig admin controls configured

# Step 2: Deploy to Mainnet
$ aptos init --network mainnet

$ aptos move publish \
  --named-addresses voting=0x<your_address> \
  --max-gas 20000 \
  --assume-yes

# Step 3: Transfer Ownership (Multi-sig)
# Use Aptos multi-sig framework for admin functions

# ============================================
# USEFUL COMMANDS
# ============================================

# View deployed modules:
$ aptos account list --account 0x<address>

# View module ABI:
$ aptos move view --function-id '0x<address>::voter_registry::get_total_registered'

# Check account balance:
$ aptos account balance --account 0x<address>

# View transaction:
$ aptos transaction show --transaction-hash 0x<tx_hash>

# Get module address:
$ aptos account lookup-address

# Upgrade contract (if upgrade policy allows):
$ aptos move publish --upgrade-policy compatible

# ============================================
# COST ESTIMATION (Mainnet)
# ============================================

# Deployment Costs:
# - Deploy 3 modules: ~0.5 APT (~$5)
# - Initialize contracts: ~0.01 APT (~$0.10)
# - Total: ~0.51 APT (~$5.10)

# Per-Transaction Costs:
# - Register voter: ~0.001 APT (~$0.01)
# - Cast vote: ~0.002 APT (~$0.02)
# - Update tally: ~0.005 APT (~$0.05)

# For 10 million voters:
# - Registration: 10M × $0.01 = $100,000
# - Voting: 10M × $0.02 = $200,000
# - Total: ~$300,000

# Note: Election Commission pays all gas fees, not voters

# ============================================
# MONITORING & MAINTENANCE
# ============================================

# Monitor contract events:
$ aptos event get-by-creation-number \
  --address 0x<address> \
  --creation-number 0

# View contract storage:
$ aptos account resource-get \
  --address 0x<address> \
  --resource-type '0x<address>::voter_registry::Registry'

# Check contract upgradability:
$ aptos move verify-package --package-path .

# ============================================
# TROUBLESHOOTING
# ============================================

# Error: Module already exists
# Solution: Use --upgrade-policy compatible

# Error: Out of gas
# Solution: Increase --max-gas parameter

# Error: Module verification failed
# Solution: Run `aptos move compile` first

# Error: Account doesn't exist
# Solution: Fund account with faucet

# Error: Type mismatch
# Solution: Check function arguments match Move types

# ============================================
# BACKUP & RECOVERY
# ============================================

# Backup private key:
$ cat ~/.aptos/config.yaml
# Store in secure location (hardware wallet recommended)

# Backup contract state (via RPC):
$ curl https://fullnode.devnet.aptoslabs.com/v1/accounts/0x<address>/resources

# Export transaction history:
$ aptos account transactions --account 0x<address> --limit 1000

# ============================================
# SECURITY BEST PRACTICES
# ============================================

# 1. Use hardware wallet for deployment keys
# 2. Enable multi-sig for admin functions
# 3. Implement emergency pause mechanism
# 4. Regular security audits
# 5. Bug bounty program
# 6. Rate limiting on frontend
# 7. DDoS protection
# 8. Continuous monitoring
# 9. Incident response plan
# 10. Regular backups

# ============================================
# SUPPORT & RESOURCES
# ============================================

# Aptos Documentation: https://aptos.dev
# Aptos Discord: https://discord.gg/aptoslabs
# Aptos Forum: https://forum.aptoslabs.com
# Move Language Book: https://move-language.github.io/move/
# Aptos Explorer: https://explorer.aptoslabs.com